// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package data

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8988be7DecodeMtliveData(in *jlexer.Lexer, out *TradesMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "updatefreq":
			out.UpdateFreq = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "server":
			out.Server = string(in.String())
		case "company":
			out.Company = string(in.String())
		case "balance":
			out.Balance = string(in.String())
		case "equity":
			out.Equity = string(in.String())
		case "margin":
			out.Margin = string(in.String())
		case "freemargin":
			out.FreeMargin = string(in.String())
		case "marginlevel":
			out.MarginLevel = string(in.String())
		case "profittotal":
			out.ProfitTotal = string(in.String())
		case "orders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Orders = make(map[string]OrderType)
				} else {
					out.Orders = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 OrderType
					easyjson8988be7DecodeMtliveData1(in, &v1)
					(out.Orders)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8988be7EncodeMtliveData(out *jwriter.Writer, in TradesMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UpdateFreq != "" {
		const prefix string = ",\"updatefreq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UpdateFreq))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Login != "" {
		const prefix string = ",\"login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Login))
	}
	if in.Server != "" {
		const prefix string = ",\"server\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Server))
	}
	if in.Company != "" {
		const prefix string = ",\"company\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Company))
	}
	if in.Balance != "" {
		const prefix string = ",\"balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Balance))
	}
	if in.Equity != "" {
		const prefix string = ",\"equity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Equity))
	}
	if in.Margin != "" {
		const prefix string = ",\"margin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Margin))
	}
	if in.FreeMargin != "" {
		const prefix string = ",\"freemargin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FreeMargin))
	}
	if in.MarginLevel != "" {
		const prefix string = ",\"marginlevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarginLevel))
	}
	if in.ProfitTotal != "" {
		const prefix string = ",\"profittotal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProfitTotal))
	}
	{
		const prefix string = ",\"orders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Orders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Orders {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				easyjson8988be7EncodeMtliveData1(out, v2Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradesMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8988be7EncodeMtliveData(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradesMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8988be7DecodeMtliveData(l, v)
}
func easyjson8988be7DecodeMtliveData1(in *jlexer.Lexer, out *OrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "timeopen":
			out.TimeOpen = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "initvolume":
			out.InitVolume = string(in.String())
		case "curvolume":
			out.CurVolume = string(in.String())
		case "priceopen":
			out.PriceOpen = string(in.String())
		case "sl":
			out.SL = string(in.String())
		case "tp":
			out.TP = string(in.String())
		case "swap":
			out.Swap = string(in.String())
		case "pricesl":
			out.PriceSL = string(in.String())
		case "profit":
			out.Profit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8988be7EncodeMtliveData1(out *jwriter.Writer, in OrderType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.TimeOpen != "" {
		const prefix string = ",\"timeopen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TimeOpen))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.InitVolume != "" {
		const prefix string = ",\"initvolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InitVolume))
	}
	if in.CurVolume != "" {
		const prefix string = ",\"curvolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CurVolume))
	}
	if in.PriceOpen != "" {
		const prefix string = ",\"priceopen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PriceOpen))
	}
	if in.SL != "" {
		const prefix string = ",\"sl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SL))
	}
	if in.TP != "" {
		const prefix string = ",\"tp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TP))
	}
	if in.Swap != "" {
		const prefix string = ",\"swap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Swap))
	}
	if in.PriceSL != "" {
		const prefix string = ",\"pricesl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PriceSL))
	}
	if in.Profit != "" {
		const prefix string = ",\"profit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Profit))
	}
	out.RawByte('}')
}
